/* /css/edit/interactions.css */

/**
 * Interactive Elements and User Feedback Module
 * 
 * This stylesheet defines all interactive behaviors, hover effects, and visual
 * feedback systems for the stash dashboard editor. It creates a polished,
 * responsive interface that provides immediate feedback for user actions while
 * maintaining optimal performance during drag-and-drop operations.
 * 
 */

/**
 * Drag Handle Interactive System
 * 
 * Provides visual and tactile feedback for draggable areas within category cards.
 * The drag handle serves as the primary interaction point for moving cards around
 * the canvas, with clear visual cues that indicate draggable functionality and
 * current interaction state.
 */
.drag-handle {
    cursor: move;                             /* Indicate draggable functionality to users */
    transition: all var(--animation-duration) ease; /* Smooth state transitions (200ms default) */
    user-select: none;                        /* Prevent text selection during drag operations */
}

.drag-handle:hover {
    background-color: rgba(255, 255, 255, 0.02); /* Subtle highlight indicates interactive area */
}

.drag-handle:active {
    cursor: grabbing;                         /* Immediate feedback when drag begins */
}

/**
 * Stash Item Drag Handle Visibility Override
 *
 * Makes drag handles for individual stash items always visible rather than
 * hidden by default with hover-only visibility. Improves discoverability
 * and eliminates the need for users to discover drag functionality through
 * hover exploration.
 */
.stash-tile .stash-drag-handle {
    opacity: 1 !important;                   /* Force visibility - override Tailwind classes */
    transition: all 0.2s ease;               /* Smooth transitions for scale effect */
}

.stash-tile .stash-drag-handle:hover {
    opacity: 1 !important;                   /* Maintain visibility on hover */
    transform: scale(1.1);                   /* Slight enlargement for visual feedback */
}


/**
 * Drag Indicator Icon Enhancement
 * 
 * Provides subtle scaling animation for the drag handle icon to reinforce
 * interactivity and provide engaging hover feedback. The icon serves as a
 * visual anchor that helps users identify where to grab draggable elements.
 */
.drag-indicator {
  transition: all var(--animation-duration) ease; /* Smooth scaling transitions */
}

.drag-handle:hover .drag-indicator {
  transform: scale(1.1);                    /* Subtle enlargement draws attention to drag functionality */
}

/**
 * Stash Tile Shimmer Animation System
 * 
 * Creates an elegant sliding highlight effect that sweeps across stash tiles
 * on hover, providing sophisticated visual feedback that enhances the premium
 * feel of the interface. The animation uses a pseudo-element to avoid affecting
 * the tile's content layout.
 * 
 */
.stash-tile::before {
  content: '';                              /* Empty pseudo-element for animation overlay */
  position: absolute;                       /* Position independent of tile content flow */
  top: 0;                                   /* Full height coverage from top */
  left: -100%;                              /* Start completely off-screen to left */
  width: 100%;                              /* Full width to cover entire tile */
  height: 100%;                             /* Full height to cover entire tile */
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent); /* Shimmer effect gradient */
  transition: left 1s ease;                /* Smooth horizontal movement across tile */
}

.stash-tile:hover::before {
  left: 100%;                               /* Move completely off-screen to right, creating sweep */
}

/**
 * Primary Action Button Styling System
 * 
 * Defines the interactive behavior for main action buttons throughout the interface
 * including category management buttons and primary controls. These buttons receive
 * enhanced visual treatment with shadows, scaling, and smooth transitions to indicate
 * their importance in the user workflow.
 * 
 */
.action-btn {
  transition: all var(--animation-duration) ease; /* Smooth multi-property transitions */
  position: relative;                       /* Enable absolute positioning of child elements */
  overflow: hidden;                         /* Contain any visual effects within button bounds */
  border-radius: var(--border-radius);     /* Consistent corner rounding (0.5rem default) */
}

.action-btn:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* Enhanced shadow indicates elevated importance */
}

.action-btn:active {
  transform: scale(0.95);                   /* Subtle shrink provides tactile click feedback */
}

/**
 * Secondary Action Button System
 * 
 * Handles smaller, more frequent actions like edit/delete buttons on individual
 * stash items. These buttons are sized and styled for frequent use while maintaining
 * clear visual hierarchy relative to primary actions.
 * 
 */
.item-action-btn {
  transition: all var(--animation-duration) ease; /* Smooth hover transitions */
  border-radius: 6px;                       /* Slightly tighter radius for smaller buttons */
}

.item-action-btn:hover {
  transform: scale(1.1);                    /* More pronounced scaling for smaller targets */
}

/**
 * Floating Save Button Positioning and Styling
 * 
 * Creates a prominent, always-accessible save button that floats in a fixed position
 * for immediate access regardless of scroll position. The button uses modern glass
 * morphism effects and strategic positioning to remain visible and accessible while
 * not interfering with dashboard content.
 * 
 */
.save-button {
  position: fixed;                          /* Always visible regardless of scroll position */
  bottom: 24px;                             /* Comfortable margin from viewport edge */
  right: 24px;                              /* Standard right-side positioning for primary actions */
  z-index: 100;                             /* Above all dashboard content for guaranteed visibility */
  backdrop-filter: blur(8px);              /* Glass morphism effect for modern appearance */
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.1); /* Layered shadows for depth */
  border-radius: 50%;                       /* Perfect circle creates strong visual distinction */
}

.save-button:hover {
  box-shadow: 0 15px 35px rgba(34, 197, 94, 0.4), 0 5px 15px rgba(0, 0, 0, 0.3); /* Green accent indicates save action */
}

/**
 * Form Input Enhancement System
 * 
 * Provides polished, responsive styling for all text inputs throughout the interface
 * with focus animations that guide user attention and provide clear visual feedback
 * about form state and interaction points.
 * 
 */
input[type="text"],
input[type="url"],
textarea {
  transition: all var(--animation-duration) ease; /* Smooth focus transitions */
  border-radius: var(--border-radius);     /* Consistent corner styling with other elements */
}

input[type="text"]:focus,
input[type="url"]:focus,
textarea:focus {
  transform: translateY(-1px);             /* Subtle lift indicates active input state */
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2); /* Blue glow indicates focus state */
}

/**
 * Sortable.js Integration Styling
 * 
 * Provides visual feedback during drag-and-drop operations using classes that
 * Sortable.js applies automatically. These styles give users clear indication
 * of drag state, drop targets, and sorting operations to create intuitive
 * drag-and-drop experiences.
 * 
 */
.sortable-ghost {
  opacity: 0.5;                             /* Semi-transparent placeholder shows drop location */
  background: rgba(59, 130, 246, 0.2) !important; /* Blue tint indicates drop target area */
  border: 2px dashed rgba(59, 130, 246, 0.5) !important; /* Dashed border reinforces placeholder nature */
}

.sortable-drag {
  transform: rotate(5deg);                  /* Rotation indicates "picked up" state */
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.5) !important; /* Enhanced shadow shows elevation */
  z-index: 1000;                            /* Above all other content during drag */
}

/**
 * Category Card Drag State Styling
 * 
 * Special styling for category cards during drag operations that provides
 * clear visual distinction while maintaining readability and preventing
 * performance issues during intensive drag operations.
 */
.card-window.sortable-drag {
  transform: rotate(2deg) scale(1.02);     /* Subtle rotation and scaling for card drag state */
  border-color: rgba(59, 130, 246, 0.6);   /* Blue border indicates active drag */
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6), 0 0 0 2px rgba(59, 130, 246, 0.3); /* Enhanced shadows for elevation */
}

/**
 * Performance Mode Optimizations
 * 
 * Disables expensive visual effects during drag operations to maintain smooth
 * 60fps performance even on slower devices. These optimizations are automatically
 * applied by JavaScript during drag operations and removed when dragging ends.
 * 
 */
body.dragging-active {
  cursor: grabbing;                         /* Global cursor indicates drag in progress */
  user-select: none;                        /* Prevent text selection during drag operations */
}

.card-window.card-dragging {
  backdrop-filter: none;                    /* Disable expensive blur effect during drag */
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.4); /* Simplified shadow reduces rendering cost */
  transition: none;                         /* Disable transitions for immediate position updates */
  border-color: rgba(59, 130, 246, 0.6);   /* Blue border indicates drag state */
  transform-origin: center center;          /* Ensure transforms apply from card center */
  will-change: transform;                   /* Hint browser to optimize for transform operations */
}

/**
 * Loading State Visual Indicator
 * 
 * Provides clear visual feedback during asynchronous operations like save
 * operations, data loading, or network requests. The loading state combines
 * opacity reduction with a spinning indicator to communicate ongoing processes.
 * 
 */
.loading {
  position: relative;                       /* Enable absolute positioning of spinner */
  pointer-events: none;                     /* Prevent interaction during loading state */
  opacity: 0.6;                             /* Reduced opacity indicates disabled state */
}

.loading::after {
  content: '';                              /* Empty pseudo-element for spinner */
  position: absolute;                       /* Position independently of content flow */
  top: 50%;                                 /* Center vertically within loading element */
  left: 50%;                                /* Center horizontally within loading element */
  width: 20px;                              /* Standard spinner size for visibility */
  height: 20px;                             /* Square aspect for perfect circle */
  margin: -10px 0 0 -10px;                 /* Negative margins for perfect centering */
  border: 2px solid rgba(59, 130, 246, 0.3); /* Light border creates spinner track */
  border-radius: 50%;                       /* Perfect circle shape */
  border-top-color: #3b82f6;               /* Solid top creates spinning effect */
  animation: spin 1s linear infinite;       /* Continuous rotation using keyframe from animations.css */
}

/**
 * Accessibility Focus Indicators
 * 
 * Provides clear, high-contrast focus indicators for keyboard navigation users
 * that meet WCAG accessibility guidelines. Focus indicators only appear when
 * navigating with keyboard (focus-visible) to avoid visual clutter for mouse users.
 * 
 */
.action-btn:focus-visible,
.item-action-btn:focus-visible,
.save-button:focus-visible {
  outline: 2px solid #3b82f6;              /* High contrast blue meets accessibility standards */
  outline-offset: 2px;                      /* Separation prevents content overlap */
}

/**
 * Touch Device Optimizations
 * 
 * Enhanced touch targets and hover state management for mobile and tablet devices
 * These optimizations ensure the interface works well across all input methods
 * while maintaining the premium desktop experience.
 */
@media (hover: none) and (pointer: coarse) {
  /* Touch-specific optimizations for devices without hover capability */
  .stash-tile::before {
    display: none;                          /* Disable shimmer effect on touch devices */
  }
  
  .action-btn:hover,
  .item-action-btn:hover {
    transform: none;                        /* Disable hover transforms that don't work on touch */
  }
}

/**
 * High Performance Device Detection
 * 
 * Enhanced animations and effects for devices that can handle more intensive
 * visual processing without impacting performance or user experience.
 */
@media (prefers-reduced-motion: no-preference) and (min-resolution: 144dpi) {
  /* Enhanced effects for high-DPI displays with motion support */
  .card-window {
    backdrop-filter: blur(calc(var(--backdrop-blur) * 1.25)); /* Enhanced blur for high-DPI displays */
  }
}
